local monarch = require "monarch.monarch"
local url = require "utils.url"
local gooey = require "gooey.gooey"
local gooey_buttons = require "utils.gooey_buttons"
local debug = require "screens.debug.debug"
local gui_utils = require "utils.gui"
local messages = require "utils.messages"
local platform = require "utils.platform"
local localization = require "utils.localization"

local function game_analyctics()
	local active = true
	local version = localization.get("debug_screen", "missing_version", "missing")
	local key = localization.get("debug_screen", "missing_key", "missing")
	local secret = localization.get("debug_screen", "missing_secret", "missing")

	if gameanalytics.mock then
		active = false
	end
	if platform.MACOS then
		version = localization.get("debug_screen", "platform_not_supported", "Not supported")
		key = localization.get("debug_screen", "platform_not_supported", "Not supported")
		secret = localization.get("debug_screen", "platform_not_supported", "Not supported")
	elseif platform.WINDOWS then
		version = sys.get_config("gameanalytics.build_windows", version)
		key = sys.get_config("gameanalytics.game_key_windows", key)
		secret = sys.get_config("gameanalytics.secret_key_windows", secret)
	elseif platform.IOS then
		version = sys.get_config("gameanalytics.build_ios", version)
		key = sys.get_config("gameanalytics.game_key_ios", key)
		secret = sys.get_config("gameanalytics.secret_key_windows", secret)
	elseif platform.ANDROID then
		version = sys.get_config("gameanalytics.build_android", version)
		key = sys.get_config("gameanalytics.game_key_android", key)
		secret = sys.get_config("gameanalytics.secret_key_windows", secret)
	elseif platform.WEB then
		version = sys.get_config("gameanalytics.build_html5", version)
		key = sys.get_config("gameanalytics.game_key_html5", key)
		secret = sys.get_config("gameanalytics.secret_key_windows", secret)
	end
	
	gui.set_text(gui.get_node("ga_active"), localization.get("debug_screen", "txt_active", "Active") .. ": " .. tostring(active))
	gui.set_text(gui.get_node("ga_version"), localization.get("debug_screen", "txt_version", "Version") .. ": " .. version)
	gui.set_text(gui.get_node("ga_gamekey"), localization.get("debug_screen", "txt_key", "Key") .. ": " .. key)
	gui.set_text(gui.get_node("ga_gamesecret"), localization.get("debug_screen", "txt_secret", "Secret") .. ": " .. secret)
	gui_utils.scale_text_to_fit_size(gui.get_node("ga_gamesecret"))
	gui_utils.scale_text_to_fit_size(gui.get_node("ga_gamekey"))
end

function init(self)
	msg.post(".", messages.ACQUIRE_INPUT_FOCUS)
	msg.post(url.MENU, messages.HIDE)
	game_analyctics()

	gui.set_text(gui.get_node("template/title"), localization.get_upper("debug_screen", "title", "DEBUG"))
	gui.set_text(gui.get_node("add_one/txt"), localization.get_upper("debug_screen", "add_one", "Add One"))
	gui.set_text(gui.get_node("add_5/txt"), localization.get_upper("debug_screen", "add_five", "Add 5"))
	gui.set_text(gui.get_node("add_100/txt"), localization.get_upper("debug_screen", "add_hundred", "Add 100"))
	gui.set_text(gui.get_node("add_all/txt"), localization.get_upper("debug_screen", "add_all", "Add All"))
	gui.set_text(gui.get_node("load/txt"), localization.get("debug_screen", "load_backup", "Load Backup"))
	gui.set_text(gui.get_node("moves/txt"), localization.get("debug_screen", "add_random_moves", "Add Random Moves"))

	gui_utils.scale_group_text_to_fit_parent_size(gui.get_node("add_one/txt"), gui.get_node("add_5/txt"), gui.get_node("add_100/txt"),
													gui.get_node("add_all/txt"), gui.get_node("load/txt"), gui.get_node("moves/txt"))
	
	gui.set_enabled(gui.get_node("load/btn"), false)
	if platform.WINDOWS then
		gui.set_enabled(gui.get_node("load/btn"), true)
	end
end

function final(self)
	msg.post(url.MENU, messages.SHOW)
end

function on_input(self, action_id, action)
	gooey.button("btn_back", action_id, action, function()
		monarch.back()
	end)
	
	gooey.button("add_one/btn", action_id, action, function()
		debug.add_pokemon()
	end, function(b) gooey_buttons.common_button(b, gui.get_node("add_one/txt")) end)
	
	gooey.button("add_5/btn", action_id, action, function()
		debug.add_pokemon(5)
	end, function(b) gooey_buttons.common_button(b, gui.get_node("add_5/txt")) end)
	
	gooey.button("add_100/btn", action_id, action, function()
		debug.add_pokemon(100)
	end, function(b) gooey_buttons.common_button(b, gui.get_node("add_100/txt")) end)
	
	gooey.button("add_all/btn", action_id, action, function()
		debug.add_all_pokemon()
	end, function(b) gooey_buttons.common_button(b, gui.get_node("add_all/txt")) end)

	gooey.button("moves/btn", action_id, action, function()
		debug.add_all_moves()
	end, function(b) gooey_buttons.common_button(b, gui.get_node("moves/txt")) end)
	
	gooey.button("ga_bg", action_id, action, function()
		local loaded = crash.load_previous()
		if loaded then
			print("### BACKTRACE ###")
			print(crash.get_backtrace(loaded))
			print("### EXTRA DATA ###")
			print(crash.get_extra_data(loaded))
			print("####### END ######")
		else
			print("##### NO LOGS #####")
		end
	end)

	if gui.pick_node(gui.get_node("load/btn"), action.x, action.y) and action.pressed then
		debug.load_backup()
	end
	
end
