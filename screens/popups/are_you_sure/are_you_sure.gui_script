local monarch  = require "monarch.monarch"
local url = require "utils.url"
local render_order = require "utils.gui_render_order"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local gui_utils = require "utils.gui"
local messages = require "utils.messages"
local localization = require "utils.localization"

local data
local sender
local id
local cb

local text_key_map = { 
	[messages.CHANGE_HP] = {key = "change_hp", text = true, sub_text = false},
	[messages.RESET] = {key = "reset", text = true, sub_text = true},
	[messages.EVOLVE_CONFIRM] = {key = "evolve_confirm", text = true, sub_text = false},
	[messages.DELETE_GROUP] = {key = "delete_group", text = true, sub_text = false},
	[messages.FULL_REST] = {key = "full_rest", text = true, sub_text = false},
	[messages.TRANSFER_POKEMON] = {key = "transfer_pokemon", text = true, sub_text = true},
	[messages.TRANSFER_POKEMON_LOCAL] = {key = "transfer_pokemon_local", text = true, sub_text = true},
	[messages.RELEASE_POKEMON] = {key = "release_pokemon", text = false, sub_text = false},
	[messages.DELETE_PROFILE] = {key = "delete_profile", text = false, sub_text = false},
	default = {key = "default"}
}

function init(self)
	gooey.acquire_input()
	gui.set_render_order(render_order.POPUP_ON_POPUP)
	data = monarch.data("are_you_sure")
	cb = data.cb
	sender = data.sender
	id = data.id
	
	local title_args = data.title_args
	local text_args = data.text_args
	local sub_text_args = data.sub_text_args
	
	gui.set_text(gui.get_node("txt_confim"), localization.get("are_you_sure_popup", "txt_confim", "YES"))
	gui.set_text(gui.get_node("txt_exit"), localization.get("are_you_sure_popup", "txt_exit", "NO"))
	-- get localization key
	local map = text_key_map[data.message] or text_key_map.default
	
	-- set title
	local title = localization.get("are_you_sure_popup", map.key .. "_title", "<Delete stuff?>")
	if title_args then
		title = string.format(title, unpack(title_args))
	end
	gui.set_text(gui.get_node("txt_title"), title)
	
	-- set text
	local text = localization.get("are_you_sure_popup", "default_text", "Are you sure?")
	if map.text then
		text = localization.get("are_you_sure_popup", map.key .. "_text", text)
		if text_args then
			text = string.format(text, unpack(text_args))
		end
	end
	gui_utils.adjust_for_text_change_vertical("txt", text, {"box"}, {"btn_exit", "btn_confirm", "txt_sub"}, {"txt", "txt_title"})
	
	-- set sub_text
	if map.sub_text then
		local sub_text = localization.get("are_you_sure_popup", map.key .. "_sub_text", "")
		if sub_text_args then
			sub_text = string.format(sub_text, unpack(sub_text_args))
		end
		gui_utils.adjust_for_text_change_vertical("txt_sub", sub_text, nil, nil, {"box"})
	end
end

local function confirm()
	if sender then
		msg.post(sender, "response", {response=true, data=data.data, id=id})
	end
	if cb then
		cb(true)
	end
	monarch.back()
end

local function exit()
	if sender then
		msg.post(sender, "response", {response=false, data=data.data, id=id})
	end
	if cb then
		cb(false)
	end
	monarch.back()
end

function on_input(self, action_id, action)
	local confirm_b = gooey.button("btn_confirm", action_id, action, confirm, function(b) gooey_buttons.common_button(b, gui.get_node("txt_confim")) end)
	if confirm_b.consumed then
		return true
	end
	local exit_b = gooey.button("btn_exit", action_id, action, exit, function(b) gooey_buttons.common_button(b, gui.get_node("txt_exit")) end)
	if exit_b.consumed then
		return true
	end
	local g = gooey.button("box", action_id, action, function() end)
	if not g.over then
		gooey.button("dimmer", action_id, action, function() monarch.back() end)
	end
end
