local button = require "utils.button"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local _pokemon = require "pokedex.pokemon"
local pokedex = require "pokedex.pokedex"
local inventory = require "screens.storage.inventory"
local gro = require "utils.gui_render_order"
local url = require "utils.url"
local gui_colors = require "utils.gui_colors"
local flow = require "utils.flow"
local movedex = require "pokedex.moves"
local inventory_buttons = {}
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local notify = require "utils.notify"
local gui_utils = require "utils.gui"
local share = require "pokedex.share"
local screens = require "utils.screens"
local messages = require "utils.messages"
local broadcast = require "utils.broadcast"
local net_members = require "pokedex.network.net_members"
local net_member_name = require "pokedex.network.net_member_name"
local send_pokemon = require "pokedex.network.send_pokemon"
local utils = require "utils.utils"
local _share = require "pokedex.share"
local localization = require "utils.localization"
local profiles = require "pokedex.profiles"


-- Because the "swap pokemon" popup isn't actually its own screen, it doesn't re-init and reset positions of everything
-- every time it shows up. Therefore, I can't dynamically adjust things for it each time, I need to store their initial values
local y_size_swap_bg
local y_pos_tutorial

local DESTINATION_PC = "PC"
local DESTINATION_PARTY = "PARTY"

local function join_table(title, T, sep)
	if T then
		return title .. table.concat(T, sep)
	end
	return title
end

local function back()
	monarch.back()
end

local function update_storage()
	msg.post(url.STORAGE, messages.PARTY_UPDATED)
	msg.post(url.STORAGE, messages.PC_UPDATED)
end


local function set_pokemon_sprite(sprite, pokemon)
	local pokemon_sprite, texture = _pokemon.get_sprite(pokemon)
	gui.set_texture(sprite, texture)
	if pokemon_sprite then
		gui.play_flipbook(sprite, pokemon_sprite)
	end
end

local function update_hp_meter(max, current)
	local max_size = gui.get_size(gui.get_node("hp_bar_bg"))
	local percent = current/max
	local size = gui.get_size(gui.get_node("hp_bar_bg1"))

	size.x = math.min(percent * max_size.x, max_size.x)
	gui.set_size(gui.get_node("hp_bar_bg1"), size)
end

local function inventory_button(self, node, id, swap)
	return button.register(node, function()
		if not id or not swap then
			return
		end
		storage.swap(swap, id)
		local other_pokemon = storage.get_pokemon(id)
		local other_nickname = _pokemon.get_nickname(other_pokemon)
		local other_species = _pokemon.get_current_species(other_pokemon)
		other_nickname = other_nickname or localization.upper(other_species)
		notify.notify(localization.get("transfer_popup", "swap_pokemon", "%s MOVED TO PARTY\n%s MOVED TO PC"):format(self.nickname, other_nickname))
		update_storage()
		back()
	end)
end


local function setup_inventory(self)
	local inventory = storage.list_of_ids_in_party()

	
	local has_second_row = false
	for i=1, 6 do
		local row = math.ceil(i/3)
		local p = math.fmod(i-1, 3) + 1

		local pokemon
		if i <= #inventory then
			pokemon = storage.get_pokemon(inventory[i])
		end
		local sprite = gui.get_node("row" .. row .."/pokemon" .. p .. "/pokemon_sprite")
		local text = gui.get_node("row" .. row .."/pokemon" .. p .. "/txt_pokemon")
		local held_item = gui.get_node("row" .. row .."/pokemon" .. p .. "/held_item")
		local background = gui.get_node("row" .. row .. "/pokemon" .. p .. "/background")
		if pokemon then
			gui.set_text(text, localization.upper(_pokemon.get_current_species(pokemon)) .. "\n" .. localization.get("pokemon_information", "pokemon_level", "Lv.") .. " " .. _pokemon.get_current_level(pokemon))
			gui.set_enabled(held_item, _pokemon.get_held_item(pokemon) ~= nil)
			gui.set_enabled(sprite, true)
			set_pokemon_sprite(sprite, pokemon)
			table.insert(inventory_buttons, inventory_button(self, sprite, inventory[i], self.pokemon_id))

			if (row == 2) then
				has_second_row = true
			end
		else
			gui.set_enabled(background, false)
		end
	end

	local node_tutorial_bg = gui.get_node("max_active_pokemon_tutorial")
	
	-- Shrink background if they have few enough PokÃ©mon shown to not need 2 rows
	if not has_second_row then
		local shift_amount = 170
		-- NOTE: values were stored during init because the GUI doesn't get reset when this "popup" reopens - it's just enabled/disabled
		local node_swap_bg = gui.get_node("swap_background")
		local size_swap_bg = gui.get_size(node_swap_bg)
		size_swap_bg.y = y_size_swap_bg - shift_amount 
		gui.set_size(node_swap_bg, size_swap_bg)

		local tutorial_pos = gui.get_position(node_tutorial_bg)
		tutorial_pos.y = y_pos_tutorial + shift_amount
		gui.set_position(node_tutorial_bg, tutorial_pos)
	end

	-- Hide the "you can increase your max slots" text if user is already at max
	local _, max_slots_range_max = storage.get_max_party_pokemon_range()
	local max_slots = storage.get_max_party_pokemon()
	if max_slots >= max_slots_range_max then
		gui.set_enabled(node_tutorial_bg, false)
	end
end

local function setup_move(pokemon, name, index)
	local move_name = gui.get_node("move_" .. index .. "/name")
	local move_icon = gui.get_node("move_" .. index .. "/element")
	local pp_lbl = gui.get_node("move_" .. index .. "/lbl_pp")
	local pp_current = gui.get_node("move_" .. index .. "/txt_pp_current")
	local pp_max = gui.get_node("move_" .. index .. "/txt_pp_max")
	gui.set_enabled(gui.get_node("move_" .. index .. "/root"), true)
	local current = _pokemon.get_move_pp(pokemon, name)
	if type(current) == "number" then
		local max = _pokemon.get_move_pp_max(pokemon, name)
		gui.set_text(pp_current, current)
		gui.set_text(pp_max, "/" .. max)
		local p = gui.get_position(pp_current)
		p.x = p.x + gui.get_text_metrics_from_node(pp_current).width
		gui.set_position(pp_max, p)
		if current == 0 then
			gui.set_color(pp_current, gui_colors.RED)
			gui.set_color(pp_max, gui_colors.RED)
			gui.set_color(pp_lbl, gui_colors.RED)
		elseif current < max then
			gui.set_color(pp_current, gui_colors.RED)
			gui.set_color(pp_max, gui_colors.GREEN)
			gui.set_color(pp_lbl, gui_colors.GREEN)
		else
			gui.set_color(pp_current, gui_colors.GREEN)
			gui.set_color(pp_max, gui_colors.GREEN)
			gui.set_color(pp_lbl, gui_colors.GREEN)
		end
	else
		gui.set_text(pp_current, string.sub(current, 1, 5) .. ".")
		gui.set_text(pp_max, "")
	end
	gui.set_text(move_name, localization.get_upper("moves", name, name))
	gui_utils.scale_text_to_fit_parent_size(move_name)
	gui.set_color(move_name, movedex.get_move_color(name))
	gui.play_flipbook(move_icon, movedex.get_move_icon(name))
end

local function setup_info(self)
	local pokemon = storage.get_pokemon(self.pokemon_id)
	local pokemon_sprite, texture = _pokemon.get_sprite(pokemon)
	gui.set_texture(gui.get_node("pokemon_sprite"), texture)
	if pokemon_sprite then
		gui.play_flipbook(gui.get_node("pokemon_sprite"), pokemon_sprite)
	end
	
	gui.set_text(gui.get_node("txt_ot_name"), localization.get_upper("pokemon_information","ot_name","OT") .. ": " .. pokemon.ot.name)
	gui.set_text(gui.get_node("txt_ot_id"), localization.get_upper("pokemon_information","ot_id","ID") .. ": " .. pokemon.ot.id)
	self.can_be_wild = pokemon.ot.uid == profiles.get_active_uid()
	
	gui.set_text(gui.get_node("txt_lvl"), localization.get("pokemon_information", "pokemon_level","Lv.") .. " " .. _pokemon.get_current_level(pokemon))
	gui.set_text(gui.get_node("txt_ac"), localization.get("pokemon_information", "pokemon_ac","AC") .. ": " .. _pokemon.get_AC(pokemon))

	local item = _pokemon.get_held_item(pokemon)
	
	local holding = item and localization.get_upper("items", item, item) or localization.get("pokemon_information", "txt_no_item", "NO ITEM")
	gui.set_text(gui.get_node("txt_held_item"), holding)
	
	local c = _pokemon.get_current_hp(pokemon)
	local m = _pokemon.get_total_max_hp(pokemon)
	gui.set_text(gui.get_node("txt_hp"), localization.get("pokemon_information", "pokemon_hp", "HP:") .. " " .. c .. "/" .. m)
	update_hp_meter(m, c)
	
	self.nickname = _pokemon.get_nickname(pokemon)
	local current_species = _pokemon.get_current_species(pokemon)
	self.species_display = pokedex.get_species_display(current_species, _pokemon.get_variant(pokemon))
	if self.nickname or current_species ~= self.species_display then
		local display = current_species
		if current_species ~= self.species_display then
			display = localization.get("pokemon_variants", self.species_display, self.species_display)
		end
		gui.set_text(gui.get_node("txt_index"), string.format("#%03d", _pokemon.get_index_number(pokemon)) .. " " .. display)
	else
		gui.set_text(gui.get_node("txt_index"), string.format("#%03d", _pokemon.get_index_number(pokemon)))
	end
	self.nickname = self.nickname or current_species
	gui.set_text(gui.get_node("txt_species"), self.nickname)
	gui_utils.scale_text_to_fit_size(gui.get_node("txt_species"))
	
	local vul = gui.get_node("vulnerabilities")
	local res = gui.get_node("resistances")
	local imm = gui.get_node("immunities")
	local vul_prefix = localization.get("pokemon_information", "pokemon_vulnerabilities", "Vulnerabilities") .. ": "
	local res_prefix = localization.get("pokemon_information", "pokemon_resistances", "Resistances") .. ": "
	local imm_prefix = localization.get("pokemon_information", "pokemon_immunities", "Immunities") .. ": "
	
	gui.set_text(vul, join_table(vul_prefix, localization.translate_table("pokemon_information", "pokemon_type_", _pokemon.get_vulnerabilities(pokemon)), ", "))
	gui.set_text(res, join_table(res_prefix, localization.translate_table("pokemon_information", "pokemon_type_", _pokemon.get_resistances(pokemon)), ", "))
	gui.set_text(imm, join_table(imm_prefix, localization.translate_table("pokemon_information", "pokemon_type_", _pokemon.get_immunities(pokemon)), ", "))

	gui_utils.scale_text_with_line_breaks(vul)
	gui_utils.scale_text_with_line_breaks(res)
	gui_utils.scale_text_with_line_breaks(imm)
	
	local speed, stype = _pokemon.get_speed_of_type(pokemon)
	
	gui.set_text(gui.get_node("txt_speed"), localization.get("pokemon_information", "pokemon_speed_" .. stype, stype) .. ": " .. speed)
	gui_utils.scale_text_to_fit_parent_size(gui.get_node("txt_speed"))
	
	local index = 0
	local moves_string = ""
	local pp_string = ""
	for i=1, 4 do
		gui.set_enabled(gui.get_node("move_" .. i .. "/root"), false)
	end
	for move, data in pairs(_pokemon.get_moves(pokemon)) do
		index = index + 1
		if index > 4 then
			return
		end
		setup_move(pokemon, move, index)
	end
end

local function on_send_pokemon(self)
	local return_accept_data = utils.deep_copy(monarch.data("transfer_pokemon"))

	-- self will go away when we leave this screen so keep the variables around
	local pokemon_id = self.pokemon_id
	local pokemon_nickname = tostring(self.nickname)
	local index = self.index
	local species_display = self.species_display
	local send_as_wild = self.send_as_wild
	local is_local_host = net_members.is_local_member_host()
	local prev_screen = monarch.top(-1)
	local fn_member_chosen = function(member_id)
		local member_name = tostring(net_member_name.get_name(member_id))
		local send_type = send_pokemon.SEND_TYPE_GIFT
		local eventId = "Pokemon:Send:Group:"
		if send_as_wild then
			send_type = send_pokemon.SEND_TYPE_CATCH
			eventId = "Pokemon:Wild:Group:"
		end
		local are_you_sure_cb = function(accepted)
			if accepted then
				send_pokemon.send_pokemon(member_id, pokemon_id, send_type)
				notify.notify(localization.get("transfer_popup", "pokemon_sent","GOODBYE, %s!\nHAVE FUN WITH %s!"):format(pokemon_nickname, member_name))
				gameanalytics.addDesignEvent {
					eventId = eventId .. species_display
				}
				storage.release_pokemon(pokemon_id)
				monarch.show(prev_screen, {clear=true})
			end
		end

		if is_local_host then
			message=messages.TRANSFER_POKEMON_LOCAL
		else
			message=messages.TRANSFER_POKEMON
		end
		
		monarch.show(screens.ARE_YOU_SURE, nil,
		{
			text_args={pokemon_nickname, member_name},
			sub_text_args={pokemon_nickname, member_name},
			cb=are_you_sure_cb,
			message=message
		})
	end
	monarch.show(screens.NETWORK_CHOOSE_MEMBER, nil,
	{
		prompt=localization.get("transfer_popup", "choose_member_prompt", "Who should receive %s?"):format(pokemon_nickname),
		fn_member_chosen=fn_member_chosen
	})
end

local function refresh_send_button(self)
	local has_enough_left = not storage.is_party_pokemon(self.pokemon_id) or #storage.list_of_ids_in_party() > 1
	self.send_button_enabled = has_enough_left and net_members.has_other_members()
	gui.set_enabled(gui.get_node("btn_network_share"), self.send_button_enabled)
	self.share_button_enabled = self.share_button_enabled or self.send_button_enabled
end

local function update_checkbox(checkbox)
	if checkbox.checked then
		gui.set_color(checkbox.node, gui_colors.ORANGE)
	else
		gui.set_color(checkbox.node, gui_colors.WHITE)
	end
end

local function on_send_as_wild_checked(self, checkbox)
	self.send_as_wild = checkbox.checked
end

function init(self)
	gooey.acquire_input()
	gui.set_render_order(gro.POPUP)
	
	gui.set_text(gui.get_node("title_bar/title"), localization.get("transfer_popup", "title", "Pokemon Details"))
	gui_utils.scale_text_to_fit_size_2(gui.get_node("title_bar/title"))
	gui.set_text(gui.get_node("txt_release"), localization.get("transfer_popup", "release_pokemon", "RELEASE"))
	gui_utils.resize_parent_to_match_text(gui.get_node("txt_release"))
	gui.set_text(gui.get_node("text"), localization.get("transfer_popup", "pick_pokemon_txt", "PICK POKEMON TO SWAP"))
	gui.set_text(gui.get_node("text2"), localization.get("transfer_popup", "party_full_txt", "PARTY CURRENTLY FULL"))
	gui.set_text(gui.get_node("tutorial_text"), localization.get("transfer_popup", "tutorial_text", "You can increase your available Pokeslots in the Trainer options."))
	
	local d = monarch.data("transfer_pokemon")
	self.to = d.to
	self.pokemon_id = d.id
	self.index = _pokemon.get_index_number(storage.get_pokemon(d.id))
	setup_info(self)
	self.share_button_enabled = _share.ENABLED.CLIPBOARD_WRITE or _share.ENABLED.QRCODE_GENERATE
	if not _share.ENABLED.CLIPBOARD_WRITE then
		gui.set_enabled(gui.get_node("btn_clipboard_share"), false)
		gui.set_enabled(gui.get_node("btn_roll_twenty_share"), false)
	end
	if not _share.ENABLED.QRCODE_GENERATE then
		gui.set_enabled(gui.get_node("btn_qr_share"), false)
	end
	self.swap = gui.get_node("swap")
	self.move = gui.get_node("move")
	self.share = gui.get_node("share")
	gui.set_enabled(self.move, true)
	gui.set_enabled(self.swap, false)
	gui.set_enabled(self.share, false)
	
	if self.to == messages.LOCATION_PC then
		gui.set_text(gui.get_node("txt_move"), localization.get("transfer_popup", "move_to_" .. DESTINATION_PC, "MOVE TO " .. DESTINATION_PC))
	else
		gui.set_text(gui.get_node("txt_move"), localization.get("transfer_popup", "move_to_" .. DESTINATION_PARTY, "MOVE TO " .. DESTINATION_PARTY))
	end
	gui_utils.scale_text_to_fit_parent_size(gui.get_node("txt_move"))

	-- Export/Share button and popup
	gui.set_text(gui.get_node("txt_share"), localization.get("transfer_popup", "txt_share", "EXPORT"))
	gui_utils.scale_text_to_fit_parent_size(gui.get_node("txt_share"))
	gui.set_text(gui.get_node("share_title"), localization.get("transfer_popup", "share_title", "SHARE"))
	gui.set_text(gui.get_node("send_as_wild/text"), localization.get("transfer_popup", "send_as_wild", "As Wild PokÃ©mon"))
	gui.set_text(gui.get_node("qr_share_txt"), localization.get("transfer_popup", "qr_share", "Generate QR"))
	gui.set_text(gui.get_node("clipboard_share_txt"), localization.get("transfer_popup", "clipboard_share", "Copy to Clipboard"))
	gui.set_text(gui.get_node("roll20_share_txt"), localization.get("transfer_popup", "roll20_share", "Generate Roll20 character sheet"))
	gui.set_text(gui.get_node("network_share_txt"), localization.get("transfer_popup", "network_share", "Send to a group member"))
	self.send_as_wild = false
	gui.set_enabled(gui.get_node("send_as_wild/bg"), self.can_be_wild)
	gooey.checkbox("send_as_wild/checkmark").set_checked(self.send_as_wild)
	update_checkbox(gooey.checkbox("send_as_wild/checkmark"))
	
	self.move_button_enabled = true
	if self.to == messages.LOCATION_PC and #storage.list_of_ids_in_party() == 1 then
		self.move_button_enabled = false
		gui.set_enabled(gui.get_node("btn_move"), false)
		gui.set_enabled(gui.get_node("btn_release"), false)
	end

	y_size_swap_bg = gui.get_size(gui.get_node("swap_background")).y
	y_pos_tutorial = gui.get_position(gui.get_node("max_active_pokemon_tutorial")).y

	refresh_send_button(self)
	broadcast.register(net_members.MSG_MEMBERS_CHANGED)
end

function final(self)
	broadcast.unregister(net_members.MSG_MEMBERS_CHANGED)
end

local function move(self)
	if self.to == messages.LOCATION_PARTY then
		if storage.free_space_in_party() then
			notify.notify(localization.get("transfer_popup", "moved_to_party", "%s MOVED TO PARTY"):format(self.nickname))
			storage.move_to_party(self.pokemon_id)
			update_storage()
			back()
		else
			setup_inventory(self)
			gui.set_enabled(self.swap, true)
			gui.set_enabled(self.move, false)
		end
	elseif self.to == messages.LOCATION_PC then
		if #storage.list_of_ids_in_party() ~= 1 then
			notify.notify(localization.get("transfer_popup", "moved_to_pc", "%s MOVED TO PC"):format(self.nickname))
			storage.move_to_pc(self.pokemon_id)
			update_storage()
			back()
		end
	end
end

local function cancel_swap(self)
	gui.set_enabled(self.swap, false)
	gui.set_enabled(self.move, true)
end

local function share_popup(self)
	gui.set_enabled(self.move, not gui.is_enabled(self.move))
	gui.set_enabled(self.share, not gui.is_enabled(self.share))
end

local function release(self)
	if not storage.is_party_pokemon(self.pokemon_id) or #storage.list_of_ids_in_party() > 1 then
		monarch.show(screens.ARE_YOU_SURE, nil, 
		{
			title_args={ self.nickname }, 
			data=self.pokemon_id, 
			sender=msg.url(), 
			message=messages.RELEASE_POKEMON
		})
	end
end

function on_message(self, message_id, message, sender)
	if message_id == messages.RESPONSE then
		if message.response then
			flow.start(function()
				flow.until_true(function() return not monarch.is_busy() end)
				storage.release_pokemon(message.data)
				gameanalytics.addDesignEvent {
					eventId = "Pokemon:Send:Release:" .. self.species_display
				}
				notify.notify(localization.get("transfer_popup", "pokemon_released", "%s WAS RELEASED"):format(self.nickname))
				update_storage()
				monarch.back()
			end)
		end
	elseif message_id == hash(net_members.MSG_MEMBERS_CHANGED) then
		refresh_send_button(self)
	end
end

function on_input(self, action_id, action)
	local b = button.on_input(action_id, action)

	if gui.is_enabled(self.swap) then
		local swap_background = gooey.button("swap_background", action_id, action, function() end)
		local tutorial = gooey.button("max_active_pokemon_tutorial", action_id, action, function() end)
		if not b and not swap_background.over and not tutorial.over then
			gooey.button("swap_dimmer", action_id, action, function() cancel_swap(self) end)
		end
	elseif gui.is_enabled(self.share) then
		local share_background = gooey.button("share_background", action_id, action, function() end)

		if self.can_be_wild then
			gooey.checkbox("send_as_wild/checkmark", action_id, action, function(ck) on_send_as_wild_checked(self, ck) end, update_checkbox)
			gooey.button("send_as_wild/bg", action_id, action, function()
				local checkbox = gooey.checkbox("send_as_wild/checkmark")
				checkbox.set_checked(not checkbox.checked)
				update_checkbox(checkbox)
				on_send_as_wild_checked(self, checkbox)
			end)
		end
		
		gooey.button("btn_qr_share", action_id, action, function() 
			monarch.show(screens.QR_DISPLAY, {}, {id=self.pokemon_id, send_as_wild=self.send_as_wild})
		end, gooey_buttons.qr_share)

		gooey.button("btn_clipboard_share", action_id, action, function() 
			share.export(self.pokemon_id, self.send_as_wild)
		end, gooey_buttons.clipboard_share)
		
		gooey.button("btn_roll_twenty_share", action_id, action, function() 
			share.roll20_export(self.pokemon_id)
		end, gooey_buttons.roll_twenty_share)
		
		if self.send_button_enabled then
			gooey.button("btn_network_share", action_id, action, function() 
				on_send_pokemon(self)
			end, gooey_buttons.network_share)
		end
		
		if not share_background.over then
			gooey.button("share_dimmer", action_id, action, function() share_popup(self) end)
		end
	else
		local btn_release, btn_move, btn_share
		if self.move_button_enabled then
			btn_move = gooey.button("btn_move", action_id, action, function() move(self) end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_move")) end)
			btn_release = gooey.button("btn_release", action_id, action, function() release(self) end)
		end
		
		if self.share_button_enabled then
			btn_share = gooey.button("btn_share", action_id, action, function() share_popup(self) end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_share")) end)
		end
		
		gooey.button("btn_close", action_id, action, back, gooey_buttons.close_button)
		gooey.button("btn_cancel", action_id, action, function() cancel_swap(self) end, gooey_buttons.close_button)
		local background = gooey.button("background", action_id, action, function() end)

		if (not self.move_button_enabled or not btn_move.over) and
			(not self.share_button_enabled or not btn_share.over) and
			not b and
			(not self.move_button_enabled or not btn_release.over) and
			not background.over then
			gooey.button("bg_dimmer", action_id, action, back)
		end
	end
	
	return true
end
