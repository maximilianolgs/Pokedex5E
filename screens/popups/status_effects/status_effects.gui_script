local monarch = require "monarch.monarch"
local gro = require "utils.gui_render_order"
local _pokemon = require "pokedex.pokemon"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local url = require "utils.url"
local gui_utils = require "utils.gui"
local status_effects = require "screens.party.components.status_effects"
local storage = require "pokedex.storage"
local statuses = require "pokedex.statuses"
local messages = require "utils.messages"
local localization = require "utils.localization"
local gui_colors = require "utils.gui_colors"

local pokemon_id

local function update_checkbox(checkbox, _status)
	local pkmn = storage.get_pokemon(pokemon_id)
	local status = _pokemon.get_status_effects(pkmn)
	local color, texture
	if status[_status] then
		color = gui_colors.WHITE
		texture = statuses.status_images[_status] .. "_down"
	else
		color = statuses.faded_status_colors[_status]
		texture = statuses.status_images[_status] .. "_up"
	end
	gui.play_flipbook(checkbox.node, texture)
	gui.set_color(gui.get_node("text_"..statuses.status_names[_status]:lower()), color)
end

function init(self)
	gui.set_render_order(gro.POPUP)
	msg.post(url.MENU, messages.HIDE)

	gui.set_text(gui.get_node("template/title"), localization.get("status_effects_popup", "title", "STATUS EFFECTS"))
	gui.set_text(gui.get_node("text"), localization.get("status_effects_popup", "reset", "Reset"))

	gui.set_text(gui.get_node("status_burned/title"), localization.get("pokemon_information", "pokemon_status_burned", "Burned"))
	gui.set_text(gui.get_node("status_burned/description"), localization.get("pokemon_information", "pokemon_status_burned_desc", "A burned Pokémon rolls all damage rolls twice and takes the lower result (this bypasses and does not cancel out with things like Savage Attacker, Iron Fist, Weather, etc). In addition, the creature takes an amount of damage equal to its proficiency bonus at the beginning of each of its turns until it faints or is cured of its burns. (Fire types are immune to this status condition)"))
	gui.set_text(gui.get_node("status_poisoned/title"), localization.get("pokemon_information", "pokemon_status_poisoned", "Poisoned"))
	gui.set_text(gui.get_node("status_poisoned/description"), localization.get("pokemon_information", "pokemon_status_poisoned_desc", "A poisoned creature has disadvantage on all ability checks and attack rolls, and takes an amount of damage equal to its proficiency bonus at the end of each of its turns until it faints or is cured of its poison. (Poison and Steel types are immune to this status condition)"))
	gui.set_text(gui.get_node("status_frozen/title"), localization.get("pokemon_information", "pokemon_status_frozen", "Frozen"))
	gui.set_text(gui.get_node("status_frozen/description"), localization.get("pokemon_information", "pokemon_status_frozen_desc", "A frozen creature is incapacitated and restrained. In combat, it can attempt to break free of the ice with a STR save at the end of each of its turns against a DC of 10 + the proficiency bonus of the creature that caused this status. Outside of combat, the frozen status lasts for one hour. (Ice types are immune to this status condition)"))
	gui.set_text(gui.get_node("status_paralyzed/title"), localization.get("pokemon_information", "pokemon_status_paralyzed", "Paralyzed"))
	gui.set_text(gui.get_node("status_paralyzed/description"), localization.get("pokemon_information", "pokemon_status_paralyzed_desc", "A paralyzed creature has disadvantage on any STR or DEX saving throws and moves at half speed. When a paralyzed Pokémon begins its turn, it must first roll a d4. On a result of 1, the Pokémon is incapacitated and restrained until the beginning of their next turn and must forfeit their remaining action and bonus action to their trainer. If a creature is paralyzed and confused/asleep, the paralysis roll comes first. If it fails, it does not roll to wake or be confused. (Electric types are immune to this status condition)"))
	gui.set_text(gui.get_node("status_asleep/title"), localization.get("pokemon_information", "pokemon_status_asleep", "Asleep"))
	gui.set_text(gui.get_node("status_asleep/description"), localization.get("pokemon_information", "pokemon_status_asleep_desc", "A creature that falls asleep is affected immediately and through its next three full turns in battle. During this time, the creature is incapacitated and restrained, and rolls all saving throws with disadvantage. A sleeping creature can roll a d20 when subject to a move AND at the end of each of its turns, ending the status immediately on a result of 11 or higher."))
	gui.set_text(gui.get_node("status_confused/title"), localization.get("pokemon_information", "pokemon_status_confused", "Confused"))
	gui.set_text(gui.get_node("status_confused/description"), localization.get("pokemon_information", "pokemon_status_confused_desc", "A confused creature is affected immediately and through its next three full turns in battle. During this time, it loses its ability to take reactions and its speed is halved. When a Confused Pokémon uses an action or bonus action on its turn, it must first roll a d20. On a result of 10 or lower, the Pokémon drops concentration, hurts itself for an amount of typeless damage equal to its proficiency modifier, and the move fails. On a roll of 16 or higher, the status ends immediately."))
	gui.set_text(gui.get_node("status_flinched/title"), localization.get("pokemon_information", "pokemon_status_flinched", "Flinched"))
	gui.set_text(gui.get_node("status_flinched/description"), localization.get("pokemon_information", "pokemon_status_flinched_desc", "A flinched Pokémon has disadvantage on any attack roll, skill check, or saving throw it makes before the end of its next turn. If it activates a move that requires a saving throw during that time, the target has advantage on the roll."))

	gui.set_text(gui.get_node("text_poisoned"), localization.get("pokemon_information", "pokemon_poisoned", "PSN"))
	gui.set_text(gui.get_node("text_frozen"), localization.get("pokemon_information", "pokemon_frozen", "FZN"))
	gui.set_text(gui.get_node("text_paralyzed"), localization.get("pokemon_information", "pokemon_paralyzed", "PAR"))
	gui.set_text(gui.get_node("text_burning"), localization.get("pokemon_information", "pokemon_burned", "BRN"))
	gui.set_text(gui.get_node("text_asleep"), localization.get("pokemon_information", "pokemon_asleep", "SLP"))
	gui.set_text(gui.get_node("text_confused"), localization.get("pokemon_information", "pokemon_confused", "CNF"))
	
	self.lock = true
	timer.delay(0.1, false, function() self.lock = false end)
	data = monarch.data("status_effects")
	pokemon_id = data.pokemon_id
	local pkmn = storage.get_pokemon(pokemon_id)
	local status = _pokemon.get_status_effects(pkmn)
	update_checkbox(gooey.checkbox("poisoned"), statuses.status.POISONED)
	update_checkbox(gooey.checkbox("frozen"), statuses.status.FROZEN)
	update_checkbox(gooey.checkbox("paralyzed"), statuses.status.PARALYZED)
	update_checkbox(gooey.checkbox("burning"), statuses.status.BURNING)
	update_checkbox(gooey.checkbox("asleep"), statuses.status.ASLEEP)
	update_checkbox(gooey.checkbox("confused"), statuses.status.CONFUSED)
	
	gooey.checkbox("poisoned").set_checked(status[statuses.status.POISONED] or false)
	gooey.checkbox("frozen").set_checked(status[statuses.status.FROZEN] or false)
	gooey.checkbox("paralyzed").set_checked(status[statuses.status.PARALYZED] or false)
	gooey.checkbox("burning").set_checked(status[statuses.status.BURNING] or false)
	gooey.checkbox("asleep").set_checked(status[statuses.status.ASLEEP] or false)
	gooey.checkbox("confused").set_checked(status[statuses.status.CONFUSED] or false)
	self.scroll_area = gui.get_node("scrolling_area")
	self.scroll_node = gui.get_node("scrolling_root")
	self.scroll_stop = gui.get_node("__scroll_stop")
	self.start = vmath.vector3()
	self.is_scrolling = false
	self.scroll_position = gui.get_position(self.scroll_node)
end

local function close()
	msg.post(url.MENU, messages.SHOW)
	monarch.back()
end

local function on_checked(checkbox, status)
	local pkmn = storage.get_pokemon(pokemon_id)
	local statuses = _pokemon.get_status_effects(pkmn) 
	_pokemon.set_status_effect(pkmn, status, not statuses[status])
	storage.save()
	msg.post(url.PARTY, messages.REFRESH_STATUS)
end

function on_input(self, action_id, action)
	if self.lock then
		return
	end
	local close_button = gooey.button("btn_close", action_id, action, close)
	if close_button.consumed then
		return
	end
	if action.pressed then
		self.start.x = action.x
		self.start.y = action.y
	end
	if action_id == messages.TOUCH and gui.pick_node(self.scroll_area, action.x, action.y) and math.abs(self.start.y - action.y) > 10 then
		self.is_scrolling = true
		if action.dy < 0 or gui.get_screen_position(self.scroll_stop).y < 0 then
			self.scroll_position.y = math.max(self.scroll_position.y + action.dy, 0)
			gui.set_position(self.scroll_node, self.scroll_position)
		end
	end
	
	if not self.is_scrolling then
		local checkbox_group = gooey.group("checkbox", function()
			gooey.checkbox("poisoned", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.POISONED) end, function(c) update_checkbox(c, statuses.status.POISONED) end)
			gooey.checkbox("frozen", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.FROZEN) end, function(c) update_checkbox(c, statuses.status.FROZEN) end)
			gooey.checkbox("paralyzed", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.PARALYZED) end, function(c) update_checkbox(c, statuses.status.PARALYZED) end)
			gooey.checkbox("burning", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.BURNING) end, function(c) update_checkbox(c, statuses.status.BURNING) end)
			gooey.checkbox("asleep", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.ASLEEP) end, function(c) update_checkbox(c, statuses.status.ASLEEP) end)
			gooey.checkbox("confused", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.CONFUSED) end, function(c) update_checkbox(c, statuses.status.CONFUSED) end)
		end)
		
		if not checkbox_group.consumed and gui.pick_node(self.scroll_area, action.x, action.y) then
			gooey.button("status_poisoned/box", action_id, action, function(b) on_checked(b, statuses.status.POISONED) end, function(c) update_checkbox(gooey.checkbox("poisoned"), statuses.status.POISONED) end)
			gooey.button("status_frozen/box", action_id, action, function(b) on_checked(b, statuses.status.FROZEN) end, function(c) update_checkbox(gooey.checkbox("frozen"), statuses.status.FROZEN) end)
			gooey.button("status_paralyzed/box", action_id, action, function(b) on_checked(b, statuses.status.PARALYZED) end, function(c) update_checkbox(gooey.checkbox("paralyzed"), statuses.status.PARALYZED) end)
			gooey.button("status_burned/box", action_id, action, function(b) on_checked(b, statuses.status.BURNING) end, function(c) update_checkbox(gooey.checkbox("burning"), statuses.status.BURNING) end)
			gooey.button("status_asleep/box", action_id, action, function(b) on_checked(b, statuses.status.ASLEEP) end, function(c) update_checkbox(gooey.checkbox("asleep"), statuses.status.ASLEEP) end)
			gooey.button("status_confused/box", action_id, action, function(b) on_checked(b, statuses.status.CONFUSED) end, function(c) update_checkbox(gooey.checkbox("confused"), statuses.status.CONFUSED) end)
		end
	
		gooey.button("btn_reset", action_id, action, function()
			local pkmn = storage.get_pokemon(pokemon_id)
			local status = _pokemon.get_status_effects(pkmn)
			for s, _ in pairs(status) do
				_pokemon.set_status_effect(pkmn, s, false)
				storage.save()
			end
			gooey.checkbox("poisoned").set_checked(false)
			gooey.checkbox("frozen").set_checked(false)
			gooey.checkbox("paralyzed").set_checked(false)
			gooey.checkbox("burning").set_checked(false)
			gooey.checkbox("asleep").set_checked(false)
			gooey.checkbox("confused").set_checked(false)
			update_checkbox(gooey.checkbox("poisoned"), statuses.status.POISONED)
			update_checkbox(gooey.checkbox("frozen"), statuses.status.FROZEN)
			update_checkbox(gooey.checkbox("paralyzed"), statuses.status.PARALYZED)
			update_checkbox(gooey.checkbox("burning"), statuses.status.BURNING)
			update_checkbox(gooey.checkbox("asleep"), statuses.status.ASLEEP)
			update_checkbox(gooey.checkbox("confused"), statuses.status.CONFUSED)

			msg.post(url.PARTY, messages.REFRESH_STATUS)
		end)
	end
	if action.released then
		self.is_scrolling = false
	end
	
end
