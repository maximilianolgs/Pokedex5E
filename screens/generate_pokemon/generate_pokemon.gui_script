local button = require "utils.button"
local monarch = require "monarch.monarch"
local profiles = require "pokedex.profiles"
local pokedex = require "pokedex.pokedex"
local filters = require "pokedex.filters"
local generate = require "screens.generate_pokemon.generate_pokemon"
local gui_colors = require "utils.gui_colors"
local url = require "utils.url"
local gooey_buttons = require "utils.gooey_buttons"
local gooey_scrolling_list = require "utils.gooey_scrolling_list"
local gooey = require "gooey.gooey"
local dropdown = require "screens.generate_pokemon.dropdown"
local gui_utils = require "utils.gui"
local gui_extra_functions = require "gui_extra_functions.gui_extra_functions"
local dex_data = require "pokedex.dex_data"
local constants = require "utils.constants"
local messages = require "utils.messages"
local screens = require "utils.screens"
local localization = require "utils.localization"

local storage_data = {}
local action_position = vmath.vector3()

local selected_pokemon = {}

local img_map = {["Water's-edge"] = "Waters-edge", Forest = "Forest", Cave = "Cave", Sea = "Sea", 
				Urban = "Urban", ["Rough-terrain"] = "Rough", Mountain = "Mountain", Grassland = "Grassland",
				Rare = "Rare", All = "All"
}

local optional_text
local optional_filter = "Optional"

local MAX_SR = constants.SR_TO_NUMBER[constants.SR_LIST[#constants.SR_LIST]]
local MIN_SR = constants.SR_TO_NUMBER[constants.SR_LIST[1]]

-- Generations but remove the 'other'
local GENERATIONS = {}
for i=1, dex_data.total_regions do
	table.insert(GENERATIONS, tostring(i))
end


function final(self)
	selected_pokemon = {}
	storage_data = {}
	dropdown.final()
end

local function table_of_rows(self)
	local l = {}
	for i=1, math.ceil(#self.filtered_pokemons / 3) do
		table.insert(l, i)
	end
	return l
end

local function update_storage_data(self)
	self.pokemon_rows = table_of_rows(self)

	storage_data = {}
	local pokemons = self.filtered_pokemons
	for i=1, math.ceil(#pokemons / 3) do
		storage_data[i] = {}
		for a=1, 3 do
			local species = pokemons[(i-1)*3 + a]
			if species then
				local sprite, texture = pokedex.get_sprite(species)
				local level = pokedex.get_minimum_wild_level(species)
				storage_data[i][a] = {sprite=sprite, texture=texture, species=species, level=level}
			end
		end
	end
end

local function update_item(list, item)
	for i=1, 3 do
		local sprite_node = item.nodes["pokemon/pokemon" .. i .. "/pokemon_sprite"]
		local text_node = item.nodes["pokemon/pokemon" .. i .. "/txt_pokemon"]
		local background = item.nodes["pokemon/pokemon" .. i .. "/background"]
		local data = storage_data[item.data]
		if data and data[i] and selected_pokemon[data[i].species] then
			gui.set_color(background, vmath.vector4(0.9, 1, 0.9,1))
		else
			gui.set_color(background, vmath.vector4(1))
		end
		
		if data and data[i] then
			gui.set_enabled(background, true)
			gui.set_texture(sprite_node, data[i].texture)
			if data[i].sprite then
				gui.play_flipbook(sprite_node, data[i].sprite)
			end
			gui.set_text(text_node, data[i].species:upper() .. "\n" .. localization.get("pokemon_information", "pokemon_level", "Lv.") .. " " .. data[i].level)
		else
			gui.set_enabled(background, false)
		end
	end
end

local function on_item_selected(self, list)
	for i, entry in pairs(list.items) do
		if entry.index == list.selected_item then
			for i=1, 3 do
				local sprite_node = entry.nodes[hash("pokemon/pokemon" .. i .. "/pokemon_sprite")]
				if gui.pick_node(sprite_node, action_position.x, action_position.y) then
					local pokemon_id = self.filtered_pokemons[(list.selected_item-1)*3 + i]
					if pokemon_id then
						if selected_pokemon[pokemon_id] == nil then
							selected_pokemon[pokemon_id] = true
						else
							selected_pokemon[pokemon_id] = nil
						end
						gui.set_color(entry.nodes["pokemon/pokemon" .. i .. "/background"], vmath.vector4(0.9, 1, 0.9,1))
					end
				end
			end
		end
	end
end

local function titleCase( first, rest )
	return first:upper()..rest:lower()
end


local function get_filtered(self)
	self.trainer_class = string.gsub(self.trainer_class, "(%a)([%w_']*)", titleCase)
	self.habitat = string.gsub(self.habitat, "(%a)([%w_']*)", titleCase)
	self.type = string.gsub(self.type, "(%a)([%w_']*)", titleCase)
	return filters.get_list(self.trainer_class, self.habitat, self.min_sr, self.max_sr, self.level, self.type, self.min_generation, self.max_generation)
end


local function update_colors(self)
	if self.habitat == optional_filter then
		gui.set_color(gui.get_node("txt_habitat"), gui_colors.HERO_TEXT_FADED)
	else
		gui.set_color(gui.get_node("txt_habitat"), gui_colors.HERO_TEXT)
	end
	
	if self.trainer_class == optional_filter then
		gui.set_color(gui.get_node("txt_trainer"), gui_colors.HERO_TEXT_FADED)
	else
		gui.set_color(gui.get_node("txt_trainer"), gui_colors.HERO_TEXT)
	end
	
	if self.type == optional_filter then
		gui.set_color(gui.get_node("txt_type"), gui_colors.HERO_TEXT_FADED)
	else
		gui.set_color(gui.get_node("txt_type"), gui_colors.HERO_TEXT)
	end
	
	if self.min_sr == MIN_SR then
		gui.set_color(gui.get_node("txt_min_sr"), gui_colors.HERO_TEXT_FADED)
	else
		gui.set_color(gui.get_node("txt_min_sr"), gui_colors.HERO_TEXT)
	end
	
	if self.max_sr == MAX_SR then
		gui.set_color(gui.get_node("txt_max_sr"), gui_colors.HERO_TEXT_FADED)
	else
		gui.set_color(gui.get_node("txt_max_sr"), gui_colors.HERO_TEXT)
	end
	if self.min_generation == 1 then
		gui.set_color(gui.get_node("txt_min_generation"), gui_colors.HERO_TEXT_FADED)
	else
		gui.set_color(gui.get_node("txt_min_generation"), gui_colors.HERO_TEXT)
	end
	if self.max_generation == #GENERATIONS then
		gui.set_color(gui.get_node("txt_max_generation"), gui_colors.HERO_TEXT_FADED)
	else
		gui.set_color(gui.get_node("txt_max_generation"), gui_colors.HERO_TEXT)
	end
	if self.level == 0 then
		gui.set_color(gui.get_node("txt_level"), gui_colors.HERO_TEXT_FADED)
	else
		gui.set_color(gui.get_node("txt_level"), gui_colors.HERO_TEXT)
	end
end

local function update_pokemons_list_view(self)
	self.filtered_pokemons = get_filtered(self)
	update_storage_data(self)
	self.scrolling_list.refresh(self.pokemon_rows)
	update_colors(self)
end

local function reset_filters(self)
	self.min_generation = 1
	self.max_generation = #GENERATIONS
	self.min_sr = MIN_SR
	self.max_sr = MAX_SR
	self.habitat = optional_filter
	self.trainer_class = optional_filter
	self.type = optional_filter
	self.level = 0

	gui.set_text(gui.get_node("txt_min_generation"), self.min_generation)
	gui.set_text(gui.get_node("txt_max_generation"), self.max_generation)
	gui.set_text(gui.get_node("txt_min_sr"), constants.NUMBER_TO_SR[MIN_SR])
	gui.set_text(gui.get_node("txt_max_sr"), constants.NUMBER_TO_SR[MAX_SR])
	gui.set_text(gui.get_node("txt_habitat"), optional_text)
	gui.set_text(gui.get_node("txt_trainer"), optional_text)
	gui.set_text(gui.get_node("txt_type"), optional_text)
	gui.set_text(gui.get_node("txt_level"), "-")

	selected_pokemon = {}

	update_pokemons_list_view(self)
end

function init(self)
	gooey.acquire_input()
	gui_extra_functions.init()
	msg.post(url.MENU, messages.HIDE)
	
	optional_text = localization.get_upper("generate_pokemon_screen", "optional_text", "OPTIONAL")
	
	gui.set_text(gui.get_node("template/title"), localization.get("generate_pokemon_screen", "title", "Pokemon Generator"))
	gui_utils.scale_text_to_fit_size_2(gui.get_node("template/title"))
	gui.set_text(gui.get_node("title2"), localization.get("generate_pokemon_screen", "filter_title", "FILTER ATTRIBUTES"))
	gui.set_text(gui.get_node("txt_reset"), localization.get("generate_pokemon_screen", "txt_reset_filters", "RESET FILTERS"))
	gui.set_text(gui.get_node("desc_generation"), localization.get("generate_pokemon_screen", "desc_generation", "GENERATION"))
	gui.set_text(gui.get_node("desc_sr"), localization.get("generate_pokemon_screen", "desc_sr", "SR RANGE:"))
	gui.set_text(gui.get_node("desc_habitat"), localization.get("generate_pokemon_screen", "desc_habitat", "HABITAT:"))
	gui.set_text(gui.get_node("desc_trainer"), localization.get("generate_pokemon_screen", "desc_trainer", "TRAINER TYPE:"))
	gui.set_text(gui.get_node("desc_type"), localization.get("generate_pokemon_screen", "desc_type", "POKEMON TYPE:"))
	gui.set_text(gui.get_node("desc_level"), localization.get("generate_pokemon_screen", "desc_level", "POKEMON LV."))
	
	gui.set_text(gui.get_node("txt_add"), localization.get("generate_pokemon_screen", "txt_add_to_team", "ADD TO PC"))
	gui_utils.scale_text_to_fit_parent_size(gui.get_node("txt_add"))
	gui.set_text(gui.get_node("txt_random"), localization.get("generate_pokemon_screen", "txt_random", "RANDOM"))
	
	self.trainer_class_list = filters.trainer_class_list()
	self.habitat_list = filters.habitat_list()
	self.type_list = filters.type_list()

	self.scrolling_list = gooey_scrolling_list.create_vertical_dynamic("storage", "scroll_list", "pokemon/row", "scrollbar/handle", "scrollbar/bar", "scrollbar/visual", update_item, function(list) on_item_selected(self, list) end)
	
	reset_filters(self)
	
	self.dropdown_generation_min = dropdown.create("generation_min", "min_generation", "txt_min_generation", "scroll_selection", "scroll_bg", "scroll_text", function(index)
		local t = GENERATIONS[index]
		self.min_generation = tonumber(t)
		update_pokemons_list_view(self)
	end)

	self.dropdown_generation_max = dropdown.create("generation_max", "max_generation", "txt_max_generation", "scroll_selection", "scroll_bg", "scroll_text", function(index)
		local t = GENERATIONS[index]
		self.max_generation = tonumber(t)
		update_pokemons_list_view(self)
	end)

	self.dropdown_sr_min = dropdown.create("sr_min", "min_sr", "txt_min_sr", "scroll_selection", "scroll_bg", "scroll_text", function(index)
		local t = constants.SR_LIST[index]
		self.min_sr = constants.SR_TO_NUMBER[t]
		update_pokemons_list_view(self)
	end)

	self.dropdown_sr_max = dropdown.create("sr_max", "max_sr", "txt_max_sr", "scroll_selection", "scroll_bg", "scroll_text", function(index)
		local t = constants.SR_LIST[index]
		self.max_sr = constants.SR_TO_NUMBER[t]
		update_pokemons_list_view(self)
	end)

	self.dropdown_habitat = dropdown.create("Habitat", "habitat", "txt_habitat", "scroll_selection", "scroll_bg", "scroll_text", function(index)
		self.habitat = self.habitat_list[index]
		update_pokemons_list_view(self)
	end)

	self.dropdown_trainers = dropdown.create("Trainers", "trainer", "txt_trainer", "scroll_selection", "scroll_bg", "scroll_text", function(index)
		self.trainer_class = self.trainer_class_list[index]
		update_pokemons_list_view(self)
	end)

	self.dropdown_type = dropdown.create("Type", "type", "txt_type", "scroll_selection", "scroll_bg", "scroll_text", function(index)
		self.type = self.type_list[index]
		update_pokemons_list_view(self)
	end)
end

function on_input(self, action_id, action)
	action_position.x = action.x
	action_position.y = action.y
	if self.dropdown_generation_min.on_input(GENERATIONS, action_id, action) then
		return true
	end

	if self.dropdown_generation_max.on_input(GENERATIONS, action_id, action) then
		return true
	end

	if self.dropdown_sr_min.on_input(constants.SR_LIST, action_id, action) then
		return true
	end

	if self.dropdown_sr_max.on_input(constants.SR_LIST, action_id, action) then
		return true
	end
	
	if self.dropdown_habitat.on_input(localization.translate_table("generate_pokemon_screen", "habitat_", self.habitat_list), action_id, action) then
		return true
	end
		
	if self.dropdown_trainers.on_input(localization.translate_table("generate_pokemon_screen", "trainer_", self.trainer_class_list), action_id, action) then
		return true
	end
	
	if self.dropdown_type.on_input(localization.translate_table("pokemon_information", "pokemon_type_", self.type_list), action_id, action) then
		return true
	end

	if next(self.pokemon_rows) ~= nil then
		self.scrolling_list.on_input(self.pokemon_rows, action_id, action)
	end

	gooey.button("level/btn_plus", action_id, action, function()
		self.level = math.min(self.level + 1, 20)
		gui.set_text(gui.get_node("txt_level"), self.level)
		update_pokemons_list_view(self)
	end, gooey_buttons.plus_button)

	gooey.button("btn_back", action_id, action, function()
		monarch.back()
	end)
	
	gooey.button("level/btn_minus", action_id, action, function()
		self.level = math.max(self.level - 1, 0)
		if self.level == 0 then
			gui.set_text(gui.get_node("txt_level"), "-")
		else
			gui.set_text(gui.get_node("txt_level"), self.level)
		end
		update_pokemons_list_view(self)
	end, gooey_buttons.minus_button)

	gooey.button("btn_reset", action_id, action, function()
		reset_filters(self)
	end)


	gooey.button("btn_clear_generation", action_id, action, function()
		self.min_generation = 1
		self.max_generation = #GENERATIONS
		gui.set_text(gui.get_node("txt_min_generation"), self.min_generation)
		gui.set_text(gui.get_node("txt_max_generation"), self.max_generation)
		update_pokemons_list_view(self)
	end)
	gooey.button("btn_clear_sr", action_id, action, function()
		self.min_sr = MIN_SR
		self.max_sr = MAX_SR
		gui.set_text(gui.get_node("txt_min_sr"), constants.NUMBER_TO_SR[MIN_SR])
		gui.set_text(gui.get_node("txt_max_sr"), constants.NUMBER_TO_SR[MAX_SR])
		update_pokemons_list_view(self)
	end)
	gooey.button("btn_clear_habitat", action_id, action, function()
		self.habitat = optional_filter
		gui.set_text(gui.get_node("txt_habitat"), optional_text)
		update_pokemons_list_view(self)
	end)
	gooey.button("btn_clear_trainer_type", action_id, action, function()
		self.trainer_class = optional_filter
		gui.set_text(gui.get_node("txt_trainer"), optional_text)
		update_pokemons_list_view(self)
	end)
	gooey.button("btn_clear_pokemon_type", action_id, action, function()
		self.type = optional_filter
		gui.set_text(gui.get_node("txt_type"), optional_text)
		update_pokemons_list_view(self)
	end)
	gooey.button("btn_clear_pokemon_level", action_id, action, function()
		self.level = 0
		gui.set_text(gui.get_node("txt_level"), "-")
		update_pokemons_list_view(self)
	end)
	
	gooey.button("btn_add", action_id, action, function()
		for p, _ in pairs(selected_pokemon) do
			local level = self.level == 0 and pokedex.get_minimum_wild_level(p) or self.level
			generate.add_pokemon(p, self.variant, level)
		end
		selected_pokemon = {}
	end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_add")) end)

	gooey.button("btn_random", action_id, action, function()
		local index = 1
		if #self.filtered_pokemons > 1 then
			index = rnd.range(1, #self.filtered_pokemons)
		end
		
		local species = self.filtered_pokemons[index]

		local variants = pokedex.get_variants(species)
		local variant = nil
		if variants and #variants > 0 then
			if #variants > 1 then
				variant = variants[rnd.range(1, #variants)]
			else
				variant = variants[1]
			end
		end
		
		monarch.show(screens.RANDOM_POKEMON, {}, {species=species, level=self.level, variant=variant, pokemons=self.filtered_pokemons})
	end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_random")) end)
end
