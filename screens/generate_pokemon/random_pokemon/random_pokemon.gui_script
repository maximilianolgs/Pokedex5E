local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local generate = require "screens.generate_pokemon.generate_pokemon"
local pokedex = require "pokedex.pokedex"
local variants = require "pokedex.variants"
local gooey_buttons = require "utils.gooey_buttons"
local gui_utils = require "utils.gui"
local localization = require "utils.localization"

local POKEMON_TEXT_SCALE = vmath.vector3(0.7)
local POKEMON_TEXT_SIZE = vmath.vector3(470, 100, 0)

local function update_pokemon(self)
	local sprite, texture = pokedex.get_sprite(self.species, self.variant)
	gui.set_texture(gui.get_node("pokemon_sprite"), texture)
	gui.play_flipbook(gui.get_node("pokemon_sprite"), sprite)
	local level = self.level == 0 and pokedex.get_minimum_wild_level(self.species) or self.level
	local species_display = pokedex.get_species_display(self.species, self.variant)
	if self.variant then
		species_display = localization.get("pokemon_variants", species_display, species_display)
	end
	gui.set_text(gui.get_node("txt_pokemon"), localization.upper(species_display) .. "\n" .. localization.get("pokemon_information", "pokemon_level", "Lv.") .. " " .. level)
	gui.set_scale(gui.get_node("txt_pokemon"), POKEMON_TEXT_SCALE)
	gui.set_size(gui.get_node("txt_pokemon"), POKEMON_TEXT_SIZE)
	gui_utils.scale_text_with_line_breaks(gui.get_node("txt_pokemon"))
end

function init(self)
	gooey.acquire_input()
	local data = monarch.data("random_pokemon")
	self.pokemons = data.pokemons
	self.species = data.species
	self.level = data.level
	self.variant = data.variant

	gui.set_text(gui.get_node("template/title"), localization.get("generate_pokemon_screen", "title_random_pokemon", "Random Pokemon"))
	gui.set_text(gui.get_node("txt_add"), localization.get("generate_pokemon_screen", "txt_add_to_team", "ADD TO PC"))
	gui_utils.scale_text_to_fit_parent_size(gui.get_node("txt_add"))
	gui.set_text(gui.get_node("txt_random"), localization.get("generate_pokemon_screen", "txt_re_roll", "RE-ROLL"))
	
	update_pokemon(self)
end

local function back()
	monarch.back()
end

function on_input(self, action_id, action)
	local a = gooey.button("btn_random", action_id, action, function()
		local index = 1
		if #self.pokemons > 1 then
			index = rnd.range(1, #self.pokemons)
		end
		self.species, self.variant = variants.get_species_variant_for(self.pokemons[index])
		update_pokemon(self)
	end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_random")) end)

	local b = gooey.button("btn_add", action_id, action, function()
		local level = self.level == 0 and pokedex.get_minimum_wild_level(self.species) or self.level
		generate.add_pokemon(self.species, self.variant, level)
		gameanalytics.addDesignEvent {
			eventId = "Pokemon:Add:Random:" .. pokedex.get_species_display(self.species, self.variant)
		}
	end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_add")) end)

	local c = gooey.button("btn_back", action_id, action, back)

	local g = gooey.button("background", action_id, action, function() end)
	if not g.over and not a.over and not b.over and not c.over then
		gooey.button("dimmer", action_id, action, back)
	end
	
	return true
end
