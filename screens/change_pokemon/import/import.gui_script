local pokemon_edit = require "screens.change_pokemon.change_pokemon"
local button = require "utils.button"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local pokedex = require "pokedex.pokedex"
local url = require "utils.url"
local _pokemon = require "pokedex.pokemon"
local gui_colors = require "utils.gui_colors"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local notify = require "utils.notify"
local dex = require "pokedex.dex"
local screens = require "utils.screens"
local messages = require "utils.messages"
local gui_utils = require "utils.gui"
local localization = require "utils.localization"

local HAVE_EVOLVED = false

local active_buttons = {}

local function pokemon_image(pkmn)
	local pokemon_sprite, texture = _pokemon.get_icon(pkmn)
	gui.set_texture(gui.get_node("change_pokemon/pokemon_sprite"), texture)
	if pokemon_sprite then
		gui.play_flipbook(gui.get_node("change_pokemon/pokemon_sprite"), pokemon_sprite)
	end
	gui.set_scale(gui.get_node("change_pokemon/pokemon_sprite"), vmath.vector3(3))
end

local function exit(self)
	local stack = monarch.get_stack()
	for i=#monarch.get_stack(), 1, -1 do
		if stack[i] == screens.STORAGE then
			monarch.show(screens.STORAGE)
		elseif stack[i] == screens.PARTY or stack[i] == screens.PROFILES then
			monarch.show(screens.PARTY)
		end
	end

	monarch.show(screens.PARTY)
end

local function add_pokemon(self)
	dex.set(self.pokemon.species.current, dex.states.CAUGHT)
	if storage.is_party_full() then
		notify.notify(localization.get("change_pokemon_screen", "notif_added_to_pc", "%s added to PC"):format(self.pokemon.species.current))
	else
		notify.notify(localization.get("change_pokemon_screen", "notif_added_to_party", "%s added to party"):format(self.pokemon.species.current))
	end
	storage.add(self.pokemon)
	exit(self)
	local species_display = pokedex.get_species_display(self.pokemon.species.current, self.pokemon.variant)
	gameanalytics.addDesignEvent {
		eventId = "Pokemon:Receive:" .. self.source .. ":" .. species_display
	}
end

function init(self)
	button.acquire()
	
	gui.set_text(gui.get_node("change_pokemon/top/title"), localization.get("change_pokemon_screen", "import_pokemon_title", "Pick Pokemon"))
	
	gui.set_enabled(gui.get_node("change_pokemon/cursor"), false)
	
	-- Delay the message 1 frame
	timer.delay(0, false, function() msg.post(url.MENU, messages.HIDE) end)
	local data = monarch.data("import_pokemon")
	self.pokemon = data.pokemon
	self.source = data.source
	pokemon_edit.init(self)
	pokemon_edit.redraw(self)
	pokemon_edit.block = false
	pokemon_edit.read_only = true

	pokemon_image(self.pokemon)
	
	local b = {node="btn_add", func=function() add_pokemon(self) end, refresh=function(b) gooey_buttons.common_button(b, gui.get_node("txt_add")) end}
	table.insert(active_buttons, b)

	if storage.is_party_full() then
		gui.set_text(gui.get_node("txt_add"), localization.get("change_pokemon_screen", "import_to_pc","IMPORT TO PC"))
	else
		gui.set_text(gui.get_node("txt_add"), localization.get("change_pokemon_screen", "import_to_party","IMPORT TO PARTY"))
	end
	gui_utils.scale_text_to_fit_size_2(gui.get_node("txt_add"))
end

function final(self)
	active_buttons = {}
	pokemon_edit.final(self)
	button.unregister()
end

function on_message(self, message_id, message, sender)
	pokemon_edit.on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	pokemon_edit.on_input(self, action_id, action)
	for _, button in pairs(active_buttons) do
		gooey.button(button.node, action_id, action, button.func, button.refresh)
	end
end
